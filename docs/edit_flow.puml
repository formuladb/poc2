@startuml edit_flow

title User Edit ServiceForm

actor User
box "Client UI"
    participant FormCmp
    participant TableCmp
    participant AppEffects
    participant PouchDB
    participant Store
end box
box "Server"
    participant MwzEngine
    participant EventDB
    participant NotifDB
    participant DataDB
end box

note right of User: When_user_updates_the_requested_quantity_of_a_product_list_item

User -> FormCmp: edit form
FormCmp -> Store: UserActionEditedFormData(DataObj)
AppEffects -> PouchDB: postAction
PouchDB -> EventDB: UserActionEditedFormData(DataObj)
MwzEngine <- EventDB: obj: DataObj
note over MwzEngine #CCCCCC
LOOP through dependencies of entity(obj)
  and update the dependecies recursivelly
  check for circular dependencies here too !!
    insanity check in case wrong metadata was defined
end note

alt errors?
MwzEngine -> NotifDB: errors
NotifDB -> PouchDB: **Filetered** replication\n\
  pull notifs only for this user
PouchDB -> Store: FormDataNotifFromServer
FormCmp <- Store: notifs
User <- FormCmp: errors/notifs
end

MwzEngine -> DataDB: updates
PouchDB <- DataDB: updates
AppEffects <- PouchDB: updates
AppEffects -> Store: FormDataFromBackendAction
FormCmp <- Store: formData from server

note right of User: Then_user_will_see_the_reserved_quantity_and_stock_computed_by_the_engine
note right of FormCmp #CCCCCC
FOREACH deep property in formData-from-server compare it with values last sent in UserActionEditedFormData
IF they match, it means the server did not update this property and keep the current value in FormControl
IF they don't match, the server updated this value
  CASE1. Formula was updated, this is normal, the user will not edit these properties
  CASE2. property was updated by another user, overwrite the current value in FormControl
    TODO: find a way to visually show the user that tha server has overwritten the value and which user
      similar to google docs or office 365
end note

note right of User: User_creates_new_service_form

User -> TableCmp: new row
TableCmp -> Store: UserActionNewRow(mwzType)
User <- FormCmp: empty form
AppEffects -> EventDB: UserActionNewRow
MwzEngine <- EventDB: mwzType
MwzEngine -> DataDB: create obj
PouchDB <- DataDB: {_id, _rev, mwzType, default values}
PouchDB -> Store: FormDataFromBackendAction
FormCmp <- Store: formData from server
User <- FormCmp: update form\n with _id\n and default values
note right FormCmp #CCCCCC: edit form as described above ...

@enduml
