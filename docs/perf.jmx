<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group: Postgres" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/code/metawiz/ep-data/product_list_products.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">id,product_list_id,_sy5_index,inventory_code,product_code,quantity,quantity_error,quantity_delta,quantity_del,client_stock,name,price,currency_code,state,created_at,updated_at</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">JDBCCONN</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/sy5t3m</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">postgres</stringProp>
          <stringProp name="poolMax">4</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">postgres</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="prepared statement" enabled="false"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

if (vars.get(&quot;_sy5_index&quot;).equals(&quot;&quot;)) {vars.put(&quot;_sy5_index&quot;, &quot;0&quot;);}
if (vars.get(&quot;product_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_code&quot;, null);}
if (vars.get(&quot;quantity&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity&quot;, null);}
if (vars.get(&quot;quantity_error&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_error&quot;, &quot;0&quot;);}
if (vars.get(&quot;quantity_delta&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_delta&quot;, &quot;0&quot;);}
if (vars.get(&quot;quantity_del&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_del&quot;, &quot;0&quot;);}
if (vars.get(&quot;client_stock&quot;).equals(&quot;&quot;)) {vars.put(&quot;client_stock&quot;, &quot;0&quot;);}
if (vars.get(&quot;name&quot;).equals(&quot;&quot;)) {vars.put(&quot;name&quot;, &quot;name&quot;);}
if (vars.get(&quot;price&quot;).equals(&quot;&quot;)) {vars.put(&quot;price&quot;, &quot;0&quot;);}
if (vars.get(&quot;currency_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;currency_code&quot;, &quot;x&quot;);}
if (vars.get(&quot;created_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;created_at&quot;, null);}// else {vars.put(&quot;created_at&quot;, ((Object)LocalDateTime.parse(vars.get(&quot;created_at&quot;), DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSSSSS&quot;))))}
if (vars.get(&quot;updated_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;updated_at&quot;, null);}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;id&quot;).equals(&quot;&quot;)) {vars.put(&quot;id&quot;, &quot;null&quot;);}
if (vars.get(&quot;product_list_id&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_list_id&quot;, &quot;null&quot;);}
if (vars.get(&quot;_sy5_index&quot;).equals(&quot;&quot;)) {vars.put(&quot;_sy5_index&quot;, &quot;null&quot;);}
if (vars.get(&quot;inventory_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;inventory_code&quot;, &quot;null&quot;);} else {vars.put(&quot;inventory_code&quot;, &quot;&apos;&quot; + vars.get(&quot;inventory_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;product_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_code&quot;, &quot;null&quot;);} else {vars.put(&quot;product_code&quot;, &quot;&apos;&quot; + vars.get(&quot;product_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;quantity&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_error&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_error&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_delta&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_delta&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_del&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_del&quot;, &quot;null&quot;);}
if (vars.get(&quot;client_stock&quot;).equals(&quot;&quot;)) {vars.put(&quot;client_stock&quot;, &quot;null&quot;);}
if (vars.get(&quot;name&quot;).equals(&quot;&quot;)) {vars.put(&quot;name&quot;, &quot;null&quot;);} else {vars.put(&quot;name&quot;, &quot;&apos;&quot; + vars.get(&quot;name&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;price&quot;).equals(&quot;&quot;)) {vars.put(&quot;price&quot;, &quot;null&quot;);}
if (vars.get(&quot;currency_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;currency_code&quot;, &quot;null&quot;);}
if (vars.get(&quot;state&quot;).equals(&quot;&quot;)) {vars.put(&quot;state&quot;, &quot;null&quot;);} else {vars.put(&quot;state&quot;, &quot;&apos;&quot; + vars.get(&quot;state&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;created_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;created_at&quot;, &quot;null&quot;);} else {vars.put(&quot;created_at&quot;, &quot;&apos;&quot; + vars.get(&quot;created_at&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;updated_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;updated_at&quot;, &quot;null&quot;);} else {vars.put(&quot;updated_at&quot;, &quot;&apos;&quot; + vars.get(&quot;updated_at&quot;) + &quot;&apos;&quot;);}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products (id,product_list_id,_sy5_index,product_code,quantity,state,created_at,updated_at) VALUES (?,?,?,?,?,?,?,?)</stringProp>
            <stringProp name="queryArguments">${id},${product_list_id},${_sy5_index},${product_code},${quantity},${state},${created_at},${updated_at}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,INTEGER,INTEGER,VARCHAR,INTEGER,VARCHAR,TIMESTAMP_WITH_TIMEZONE,TIMESTAMP_WITH_TIMEZONE</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products (id,product_list_id,_sy5_index,inventory_code,product_code,quantity,quantity_error,quantity_delta,quantity_del,client_stock,name,price,currency_code,state,created_at,updated_at) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS.US&apos;),to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS.US&apos;))</stringProp>
            <stringProp name="queryArguments">${id},${product_list_id},${_sy5_index},${inventory_code},${product_code},${quantity},${quantity_error},${quantity_delta},${quantity_del},${client_stock},${name},${price},${currency_code},${state},${created_at},${updated_at}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,INTEGER,DOUBLE,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,VARCHAR,NUMERIC,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="non-prepared statement" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;id&quot;).equals(&quot;&quot;)) {vars.put(&quot;id&quot;, &quot;null&quot;);}
if (vars.get(&quot;product_list_id&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_list_id&quot;, &quot;null&quot;);}
if (vars.get(&quot;_sy5_index&quot;).equals(&quot;&quot;)) {vars.put(&quot;_sy5_index&quot;, &quot;null&quot;);}
if (vars.get(&quot;inventory_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;inventory_code&quot;, &quot;null&quot;);} else {vars.put(&quot;inventory_code&quot;, &quot;&apos;&quot; + vars.get(&quot;inventory_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;product_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_code&quot;, &quot;null&quot;);} else {vars.put(&quot;product_code&quot;, &quot;&apos;&quot; + vars.get(&quot;product_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;quantity&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_error&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_error&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_delta&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_delta&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_del&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_del&quot;, &quot;null&quot;);}
if (vars.get(&quot;client_stock&quot;).equals(&quot;&quot;)) {vars.put(&quot;client_stock&quot;, &quot;null&quot;);}
if (vars.get(&quot;name&quot;).equals(&quot;&quot;)) {vars.put(&quot;name&quot;, &quot;null&quot;);} else {vars.put(&quot;name&quot;, &quot;&apos;&quot; + vars.get(&quot;name&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;price&quot;).equals(&quot;&quot;)) {vars.put(&quot;price&quot;, &quot;null&quot;);}
if (vars.get(&quot;currency_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;currency_code&quot;, &quot;null&quot;);}
if (vars.get(&quot;state&quot;).equals(&quot;&quot;)) {vars.put(&quot;state&quot;, &quot;null&quot;);} else {vars.put(&quot;state&quot;, &quot;&apos;&quot; + vars.get(&quot;state&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;created_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;created_at&quot;, &quot;null&quot;);} else {vars.put(&quot;created_at&quot;, &quot;&apos;&quot; + vars.get(&quot;created_at&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;updated_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;updated_at&quot;, &quot;null&quot;);} else {vars.put(&quot;updated_at&quot;, &quot;&apos;&quot; + vars.get(&quot;updated_at&quot;) + &quot;&apos;&quot;);}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products (id,product_list_id,_sy5_index,inventory_code,product_code,quantity,quantity_error,quantity_delta,quantity_del,client_stock,name,price,currency_code,state,created_at,updated_at) VALUES (${id},${product_list_id},${_sy5_index},${inventory_code},${product_code},${quantity},${quantity_error},${quantity_delta},${quantity_del},${client_stock},${name},${price},${currency_code},${state},${created_at},${updated_at})</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group: Postgres JSON" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/code/metawiz/ep-data/order_items.numeric_id.json.ids</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">ID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">\n</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/code/metawiz/ep-data/order_items.numeric_id.json</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">JSON</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">JDBCCONN</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/sy5t3m</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">postgres</stringProp>
          <stringProp name="poolMax">4</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">postgres</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="prepared statement" enabled="false"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

if (vars.get(&quot;_sy5_index&quot;).equals(&quot;&quot;)) {vars.put(&quot;_sy5_index&quot;, &quot;0&quot;);}
if (vars.get(&quot;product_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_code&quot;, null);}
if (vars.get(&quot;quantity&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity&quot;, null);}
if (vars.get(&quot;quantity_error&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_error&quot;, &quot;0&quot;);}
if (vars.get(&quot;quantity_delta&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_delta&quot;, &quot;0&quot;);}
if (vars.get(&quot;quantity_del&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_del&quot;, &quot;0&quot;);}
if (vars.get(&quot;client_stock&quot;).equals(&quot;&quot;)) {vars.put(&quot;client_stock&quot;, &quot;0&quot;);}
if (vars.get(&quot;name&quot;).equals(&quot;&quot;)) {vars.put(&quot;name&quot;, &quot;name&quot;);}
if (vars.get(&quot;price&quot;).equals(&quot;&quot;)) {vars.put(&quot;price&quot;, &quot;0&quot;);}
if (vars.get(&quot;currency_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;currency_code&quot;, &quot;x&quot;);}
if (vars.get(&quot;created_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;created_at&quot;, null);}// else {vars.put(&quot;created_at&quot;, ((Object)LocalDateTime.parse(vars.get(&quot;created_at&quot;), DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSSSSS&quot;))))}
if (vars.get(&quot;updated_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;updated_at&quot;, null);}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;id&quot;).equals(&quot;&quot;)) {vars.put(&quot;id&quot;, &quot;null&quot;);}
if (vars.get(&quot;product_list_id&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_list_id&quot;, &quot;null&quot;);}
if (vars.get(&quot;_sy5_index&quot;).equals(&quot;&quot;)) {vars.put(&quot;_sy5_index&quot;, &quot;null&quot;);}
if (vars.get(&quot;inventory_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;inventory_code&quot;, &quot;null&quot;);} else {vars.put(&quot;inventory_code&quot;, &quot;&apos;&quot; + vars.get(&quot;inventory_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;product_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;product_code&quot;, &quot;null&quot;);} else {vars.put(&quot;product_code&quot;, &quot;&apos;&quot; + vars.get(&quot;product_code&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;quantity&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_error&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_error&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_delta&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_delta&quot;, &quot;null&quot;);}
if (vars.get(&quot;quantity_del&quot;).equals(&quot;&quot;)) {vars.put(&quot;quantity_del&quot;, &quot;null&quot;);}
if (vars.get(&quot;client_stock&quot;).equals(&quot;&quot;)) {vars.put(&quot;client_stock&quot;, &quot;null&quot;);}
if (vars.get(&quot;name&quot;).equals(&quot;&quot;)) {vars.put(&quot;name&quot;, &quot;null&quot;);} else {vars.put(&quot;name&quot;, &quot;&apos;&quot; + vars.get(&quot;name&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;price&quot;).equals(&quot;&quot;)) {vars.put(&quot;price&quot;, &quot;null&quot;);}
if (vars.get(&quot;currency_code&quot;).equals(&quot;&quot;)) {vars.put(&quot;currency_code&quot;, &quot;null&quot;);}
if (vars.get(&quot;state&quot;).equals(&quot;&quot;)) {vars.put(&quot;state&quot;, &quot;null&quot;);} else {vars.put(&quot;state&quot;, &quot;&apos;&quot; + vars.get(&quot;state&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;created_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;created_at&quot;, &quot;null&quot;);} else {vars.put(&quot;created_at&quot;, &quot;&apos;&quot; + vars.get(&quot;created_at&quot;) + &quot;&apos;&quot;);}
if (vars.get(&quot;updated_at&quot;).equals(&quot;&quot;)) {vars.put(&quot;updated_at&quot;, &quot;null&quot;);} else {vars.put(&quot;updated_at&quot;, &quot;&apos;&quot; + vars.get(&quot;updated_at&quot;) + &quot;&apos;&quot;);}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products (id,product_list_id,_sy5_index,product_code,quantity,state,created_at,updated_at) VALUES (?,?,?,?,?,?,?,?)</stringProp>
            <stringProp name="queryArguments">${id},${product_list_id},${_sy5_index},${product_code},${quantity},${state},${created_at},${updated_at}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,INTEGER,INTEGER,VARCHAR,INTEGER,VARCHAR,TIMESTAMP_WITH_TIMEZONE,TIMESTAMP_WITH_TIMEZONE</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products (id,product_list_id,_sy5_index,inventory_code,product_code,quantity,quantity_error,quantity_delta,quantity_del,client_stock,name,price,currency_code,state,created_at,updated_at) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS.US&apos;),to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS.US&apos;))</stringProp>
            <stringProp name="queryArguments">${id},${product_list_id},${_sy5_index},${inventory_code},${product_code},${quantity},${quantity_error},${quantity_delta},${quantity_del},${client_stock},${name},${price},${currency_code},${state},${created_at},${updated_at}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,INTEGER,DOUBLE,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,VARCHAR,NUMERIC,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="non-prepared statement" enabled="true"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">JDBCCONN</stringProp>
            <stringProp name="query">INSERT INTO product_list_products_json (id,data) VALUES (${ID},&apos;${JSON}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Couchdb" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">\n</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/code/metawiz/ep-data/order_items.numeric_id.json</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">JSON</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${JSON}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">http://127.0.0.1:5984/evrt/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
