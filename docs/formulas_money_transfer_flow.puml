@startuml FormulasMoneyTransferFlow

!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v1.0.0
!includeurl ICONURL/font-awesome/database.puml
!includeurl ICONURL/font-awesome/long_arrow_right.puml

title Balance Transfer use case\nTransactional SUM(IF)-like formulas

!pragma teoz true


!define M_T1(Ex,Acc,msg) T1##Ex -[#red]-> Acc##Ex:<font color=red> msg
!define R_T1(Ex,Acc,msg) T1##Ex <-[#red]- Acc##Ex: <font color=red>msg
!define M_T2(Ex,Acc,msg) T2##Ex -[#blue]-> Acc##Ex:<font color=blue> msg
!define R_T2(Ex,Acc,msg) T2##Ex <-[#blue]- Acc##Ex: <font color=blue>msg
!define NAM(Ex) T1##Ex <-[#grey]-> O2##Ex: <font color=lightgrey>n/a align diagram for Ex1/Ex2/Ex3
!definelong NAS(Ex)
note right of T1##Ex #lightgrey
n/a
end note
!enddefinelong
!definelong S_T1(Ex,msgT1, msgO1, msgO2) 
note over T1##Ex: <font color=red>msgT1
/ note over O1##Ex: <font color=red>msgO1
/ note over O2##Ex: <font color=red>msgO2
!enddefinelong
!definelong S_T2(Ex,msgT2, msgO1, msgO2) 
note over T2##Ex: <font color=blue>msgT2
/ note over O1##Ex: <font color=blue>msgO1
/ note over O2##Ex: <font color=blue>msgO2
!enddefinelong


!definelong _(p_ex1, p_ex2, p_ex3) 
p_ex1
p_ex2
p_ex3
!enddefinelong


actor User

box "Example 1\ndeadlock resolved deterministically"
  participant T1Ex1
  participant T2Ex1
  participant O1Ex1
  participant O2Ex1
end box

box "Example 2\npe-empt PRECOMMIT"
  participant T1Ex2
  participant T2Ex2
  participant O1Ex2
  participant O2Ex2
end box

box "Example 3\npre-empt PRECOMMIT with ROLLBACK"
  participant T1Ex3
  participant T2Ex3
  participant O1Ex3
  participant O2Ex3
end box

' box "Example 4\nTBD"
'   participant T1Ex4
'   participant T2Ex4
'   participant O1Ex4
'   participant O2Ex4
' end box

note over User: Initial state:\n O1=12, O2=12
/ note over T2Ex1: Transaction Coordinators\nsingle owners of transactions \n<$database{scale=0.5}>state, <$long_arrow_right{scale=0.5}>trans
/ note over O1Ex2: Object Owner Read/Write\nsingle owners of objects\nFor this use case O1 and O2 are accounts\n<$database{scale=0.5}>state, <$long_arrow_right{scale=0.5}>opers

User -> T1Ex1: T1{O1-10,\nO2+10}
User -> T2Ex1: T2{O1-5,\nO2+5}

== 1. Transaction Controllers fan-out to Object Owners then results from Object Owners are joined by the Transaction Controllers which compute the state of the transaction ==
note right O1Ex1: workers will allow only one transaction to be active (OK) for a certain object _id

_(M_T1(Ex1, O1, T1-t0)                        , & M_T2(Ex2, O1, T2-t1)                      , & M_T2(Ex3, O1, T2-t1)                      )
_(S_T1(Ex1, BEGIN, OK, -)                     , / S_T2(Ex2, BEGIN, OK, -)                   , / S_T2(Ex3, BEGIN, OK, -)                   )
_(R_T1(Ex1, O1, {O1=12}OK)                    , & R_T2(Ex2, O1, {O1=12}OK)                  , & R_T2(Ex3, O1, {O1=12}OK)                  )
_(M_T2(Ex1, O1, T2-t1)                        , & M_T2(Ex2, O2, T2-t1)                      , & M_T2(Ex3, O2, T2-t1)                      )
_(S_T2(Ex1, BEGIN, WAIT, -)                   , / S_T2(Ex2, BEGIN, OK, OK)                  , / S_T2(Ex3, BEGIN, OK, OK)                  )
_(M_T2(Ex1, O2, T2-t1)                        , & R_T2(Ex2, O2, {O2=12}OK)                  , & R_T2(Ex3, O2, {O2=12}OK)                  )

== 2. Computations are done by the Transaction Controllers using the values received from  the Object Owners in the initial replies with {O1=12}OK ==
_(S_T2(Ex1, BEGIN, WAIT, OK)                  , / S_T2(Ex2, PRECOMMIT,,)                    , / S_T2(Ex3, PRECOMMIT,,)                    )
_(NAM(Ex1)                                    , & M_T2(Ex2, O1, {O1-2}PRECOMMIT)            , & M_T2(Ex3, O1, {O1-2}PRECOMMIT)            )
_(NAS(Ex1)                                    , / S_T2(Ex2, , READY, OK)                    , / S_T2(Ex3, , READY, OK)                    )
_(R_T2(Ex1, O2, {O1=12}OK)                    , & R_T2(Ex2, O1, {O1=2}READY)                , & R_T2(Ex3, O1, {O1=2}READY)                )
_(M_T1(Ex1, O2, T1-t0)                        , & M_T1(Ex2, O2, T1-t0)                      , & M_T1(Ex3, O2, T1-t0)                      )
_(S_T1(Ex1, BEGIN, OK, OK(t0<t1))             , / S_T1(Ex2, BEGIN, -, OK(t0<t1)             , / S_T1(Ex3, BEGIN, -, OK(t0<t1)             )
_(S_T2(Ex1, BEGIN, WAIT, OK->WAIT)            , / S_T2(Ex2, -, READY, OK->WAIT\n(t0<t1)     , / S_T2(Ex3, -, READY, OK->WAIT\n(t0<t1)     )
_(R_T1(Ex1, O2, {O2=12}OK)                    , & M_T2(Ex2, O2, {O2+2}PRECOMMIT)            , & M_T2(Ex3, O2, {O2+5}PRECOMMIT)            )

== 3. Object Owner ca pre-empt a PRECOMMIT transaction if an older transaction is received (T1.to < T2.t1), T2 must be re-computed with values updated by T1 ==

_(S_T1(Ex1, PRECOMMIT,,)                      , / S_T1(Ex2, BEGIN, OK, OK(t0<t1))           , / S_T1(Ex3, BEGIN, OK, OK(t0<t1))           )
_(M_T1(Ex1, O1, PRECOMMIT)                    , & R_T1(Ex2, O2, {O2=12}OK)                  , & R_T1(Ex3, O2, {O2=22}OK)                  )
_(M_T1(Ex1, O2, PRECOMMIT)                    , & M_T1(Ex2, O1, T1-t0)                      , & M_T1(Ex3, O1, T1-t0)                      )
_(S_T1(Ex1, , READY, OK)                      , / S_T1(Ex2, BEGIN, OK, -)                   , / S_T1(Ex3, BEGIN, OK, -)                   )
_(R_T1(Ex1, O1, {O1=2}READY)                  , & R_T1(Ex2, O1, {O1=12}OK)                  , & R_T1(Ex3, O1, {O1=12}OK)                  )
_(S_T1(Ex1, , READY, READY)                   , / S_T1(Ex2, PRECOMMIT,,)                    , / S_T1(Ex3, PRECOMMIT,,)                    )
_(R_T1(Ex1, O2, {O2=2}READY)                  , & M_T1(Ex2, O1, PRECOMMIT)                  , & M_T1(Ex3, O1, PRECOMMIT)                  )

== 4. After the T1 is COMMIT, T2 computed using the values produced by T1 and PRECOMMIT (PRECOMMIT a second time if it was pre-empted) ==

_(S_T1(Ex1, COMMIT,,)                         , & M_T1(Ex2, O2, PRECOMMIT)                  , & M_T1(Ex3, O2, PRECOMMIT)                  )
_(M_T1(Ex1, O1, COMMIT)                       , / S_T1(Ex2, , READY, OK)                    , / S_T1(Ex3, , READY, OK)                    )
_(M_T1(Ex1, O2, COMMIT)                       , & R_T1(Ex2, O1, {O1=2}READY)                , & R_T1(Ex3, O1, {O1=2}READY)                )
_(S_T1(Ex1, , DONE, READY)                    , / S_T1(Ex2, , READY, READY)                 , / S_T1(Ex3, , READY, READY)                 )
_(S_T2(Ex1, , OK, WAIT)                       , & R_T1(Ex2, O2, {O2=22}READY)               , & R_T1(Ex3, O2, {O2=22}READY)               )
_(R_T1(Ex1, O1, DONE)                         , / S_T1(Ex2, COMMIT,,)                       , / S_T1(Ex3, COMMIT,,)                       )
_(R_T2(Ex1, O1, {O1=2}OK)                     , & M_T1(Ex2, O1, COMMIT)                     , & M_T1(Ex3, O1, COMMIT)                     )
_(S_T1(Ex1, , DONE, DONE)                     , & M_T1(Ex2, O2, COMMIT)                     , & M_T1(Ex3, O2, COMMIT)                     )
_(S_T2(Ex1, , OK, OK)                         , / S_T1(Ex2, , DONE, READY)                  , / S_T1(Ex3, , DONE, READY)                  )
_(R_T1(Ex1, O2, DONE)                         , / S_T2(Ex2, , OK, WAIT)                     , / S_T2(Ex3, , OK, WAIT)                     )
_(R_T2(Ex1, O2, {O2=2}OK)                     , & R_T1(Ex2, O1, DONE)                       , & R_T1(Ex3, O1, DONE)                       )

== 5. T2 also COMMIT ==

_(NAM(Ex1)                                    , & R_T2(Ex2, O1, {O1=2}OK)                   , & R_T2(Ex3, O1, {O1=2}OK)                   )
_(NAM(Ex1)                                    , / S_T1(Ex2, , DONE, DONE)                   , / S_T1(Ex3, , DONE, DONE)                   )
_(NAM(Ex1)                                    , / S_T2(Ex2, , OK, OK)                       , / S_T2(Ex3, , OK, OK)                       )
_(NAM(Ex1)                                    , & R_T1(Ex2, O2, DONE)                       , & R_T1(Ex3, O2, DONE)                       )
_(NAM(Ex1)                                    , & R_T2(Ex2, O2, {O2=22}OK)                  , & R_T2(Ex3, O2, {O2=22}OK)                  )
_(NAM(Ex1)                                    , & M_T2(Ex2, O1, {O1-2}PRECOMMIT)            , & M_T2(Ex3, O1, {O1-5}PRECOMMIT)            )
_(NAM(Ex1)                                    , & M_T2(Ex2, O2, {O2+2}PRECOMMIT)            , & M_T2(Ex3, O2, {O2+5}PRECOMMIT)            )
_(NAM(Ex1)                                    , / S_T2(Ex2, , READY, OK)                    , / S_T2(Ex3, , FAIL, OK)                     )
_(NAM(Ex1)                                    , & R_T2(Ex2, O1, {O1=0}READY)                , & R_T2(Ex3, O1, {O1=-3}FAIL)                )
_(NAM(Ex1)                                    , / S_T2(Ex2, , READY, READY)                 , / S_T2(Ex3, , FAIL, READY)                  )
_(NAM(Ex1)                                    , & R_T2(Ex2, O2, {O2=24}READY)               , & R_T2(Ex3, O2, {O2=27}READY)               )

== 6. final steps ==

_(NAM(Ex1)                                    , / S_T2(Ex2, COMMIT,,)                       , / S_T2(Ex3, ROLLBACK,,)                     )
_(NAM(Ex1)                                    , & M_T2(Ex2, O1, COMMIT)                     , & M_T2(Ex3, O1, ROLLBACK)                   )
_(NAM(Ex1)                                    , & M_T2(Ex2, O2, COMMIT)                     , & M_T2(Ex3, O2, ROLLBACK)                   )
_(NAM(Ex1)                                    , / S_T2(Ex2, , DONE, READY)                  , / S_T2(Ex3, , CANCEL, READY)                )
_(NAM(Ex1)                                    , & R_T2(Ex2, O1, DONE)                       , & R_T2(Ex3, O1, CANCEL)                     )
_(NAM(Ex1)                                    , / S_T2(Ex2, , DONE, DONE)                   , / S_T2(Ex3, , CANCEL, CANCEL)               )
_(NAM(Ex1)                                    , & R_T2(Ex2, O2, DONE)                       , & R_T2(Ex3, O2, CANCEL)                     )

@enduml
