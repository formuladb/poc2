@startuml FormulasMoneyTransferFlow

!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v1.0.0
!includeurl ICONURL/font-awesome/database.puml
!includeurl ICONURL/font-awesome/long_arrow_right.puml

title Balance Transfer use case\nTransactional SUM(IF)-like formulas

!pragma teoz true

!define MSG_T1(Acc,msg) T1Ex1 -[#red]-> Acc##Ex1:<font color=red> msg
!define REPLY_T1(Acc,msg) T1Ex1 <-[#red]- Acc##Ex1: <font color=red>msg
!define MSG_T2(Acc,msg) T2Ex1 -[#blue]-> Acc##Ex1:<font color=blue> msg
!define REPLY_T2(Acc,msg) T2Ex1 <-[#blue]- Acc##Ex1: <font color=blue>msg
!define NO_OP T1Ex1 <-[#grey]-> O2Ex1: <font color=grey>n/a, align diagram for Ex1/Ex2/Ex3
!definelong STATE_T1(msgT1, msgO1, msgO2) 
note over T1Ex1: <font color=red>msgT1
/ note over O1Ex1: <font color=red>msgO1
/ note over O2Ex1: <font color=red>msgO2
!enddefinelong
!definelong STATE_T2(msgT2, msgO1, msgO2) 
note over T2Ex1: <font color=blue>msgT2
/ note over O1Ex1: <font color=blue>msgO1
/ note over O2Ex1: <font color=blue>msgO2
!enddefinelong

!define __MSG_T1(Acc,msg) T1Ex2 -[#red]-> Acc##Ex2:<font color=red> msg
!define __REPLY_T1(Acc,msg) T1Ex2 <-[#red]- Acc##Ex2: <font color=red>msg
!define __MSG_T2(Acc,msg) T2Ex2 -[#blue]-> Acc##Ex2:<font color=blue> msg
!define __REPLY_T2(Acc,msg) T2Ex2 <-[#blue]- Acc##Ex2: <font color=blue>msg
!define __NO_OP T1Ex2 <-[#grey]-> O2Ex2: <font color=grey>n/a, align diagram for Ex1/Ex2/Ex3
!definelong __STATE_T1(msgT1, msgO1, msgO2) 
note  over T1Ex2: <font color=red>msgT1
/ note  over O1Ex2: <font color=red>msgO1
/ note  over O2Ex2: <font color=red>msgO2
!enddefinelong
!definelong __STATE_T2(msgT2, msgO1, msgO2) 
note  over T2Ex2: <font color=blue>msgT2
/ note  over O1Ex2: <font color=blue>msgO1
/ note  over O2Ex2: <font color=blue>msgO2
!enddefinelong

actor User

box "Example 1"
  participant T1Ex1
  participant T2Ex1
  participant O1Ex1
  participant O2Ex1
end box

box "Example 2"
  participant T1Ex2
  participant T2Ex2
  participant O1Ex2
  participant O2Ex2
end box

box "Example 3"
  participant T1Ex3
  participant T2Ex3
  participant O1Ex3
  participant O2Ex3
end box

note over User: Initial state:\n O1=12, O2=12
/ note over T2Ex1: Transaction Coordinators\nsingle owners of transactions \n<$database{scale=0.5}>state, <$long_arrow_right{scale=0.5}>trans
/ note over O1Ex2: Object Owner Read/Write\nsingle owners of objects\nFor this use case O1 and O2 are accounts\n<$database{scale=0.5}>state, <$long_arrow_right{scale=0.5}>opers

User -> T1Ex1: T1{O1-10,\nO2+10}
User -> T2Ex1: T2{O1-5,\nO2+5}

'=============================================================
== concurrent transactions are created (fan-out) ==
'=============================================================

note right O1Ex1: workers will allow only one transaction to be active (OK) for a certain object _id

MSG_T1(O1, T1-t0)
          & __MSG_T2(O1, T2-t1)
STATE_T1(BEGIN, OK, -)
          / __STATE_T2(BEGIN, OK, -)
REPLY_T1(O1, T1-{O1=12}OK)
          & __REPLY_T2(O1,OK)

MSG_T2(O1, T2-t1)
          & __MSG_T2(O2, T2-t1)
STATE_T2(BEGIN, WAIT, -)
          / __STATE_T2(BEGIN, OK, OK)
MSG_T2(O2, T2-t1)
          & __REPLY_T2(O2,OK)

== divider 1 ==
STATE_T2(BEGIN, WAIT, OK)
          / __STATE_T2(PRECOMMIT,,)
          __MSG_T2(O1, PRECOMMIT)
          / __STATE_T2(, APPLIED, OK)
REPLY_T2(O2, T2-{O1=12}OK)
          & __REPLY_T2(O1, T1-{O1=2}APPLIED)

MSG_T1(O2, T1-t0)
          & __MSG_T1(O2, T1-t0)
STATE_T1(BEGIN, OK, OK(t0<t1))
          / __STATE_T1(BEGIN, -, OK(t0<t1))
STATE_T2(BEGIN, WAIT, OK->WAIT\n(t0<t1))
          / __STATE_T2(-, APPLIED, OK->WAIT\n(t0<t1))
REPLY_T1(O2, T1-{O2=12}OK)
          & __MSG_T2(O2, PRECOMMIT)

== divider 2 ==

STATE_T1(PRECOMMIT,,)
MSG_T1(O1, PRECOMMIT)
MSG_T1(O2, PRECOMMIT)
STATE_T1(, APPLIED, OK)
REPLY_T1(O1, T1-{O1=2}APPLIED)
STATE_T1(, APPLIED, APPLIED)
REPLY_T1(O2, T1-{O2=2}APPLIED)

== divider 3 ==

STATE_T1(COMMIT,,)
MSG_T1(O1, COMMIT)
MSG_T1(O2, COMMIT)
STATE_T1(, DONE, APPLIED)
STATE_T2(, OK, WAIT)
REPLY_T1(O1, DONE)
& REPLY_T2(O1, T1-{O1=2}OK)
STATE_T1(, DONE, DONE)
STATE_T2(, OK, OK)
REPLY_T1(O2, DONE)
& REPLY_T2(O2, T1-{O2=2}OK)

== divider 4 ==

@enduml
