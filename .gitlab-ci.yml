stages:
  - build
  - bundle
  - deploy_cluster
  - build_and_deploy
  - test_mem
  - test_postgres
  - stress
  - e2e_dev_env
  - deploy
  - e2e_demo_env
  # - e2e_example_apps
  - cleanup
  # - videos

build:
  stage: build
  script:
    - npm install
    - npm run compile
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

bundle:
  stage: bundle
  script:
    - npm run bundle
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

deploy_cluster:
  stage: deploy_cluster
  script:
    - sh deploy-k3s.sh
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

build_and_deploy:
  stage: build_and_deploy
  script:
    - export KUBECONFIG=`k3d get-kubeconfig`
    - skaffold run
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

test_mem:
  stage: test_mem
  script:
    - npm test || true
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

test_postgres:
  stage: test_postgres
  script:
    - export KUBECONFIG=`k3d get-kubeconfig`
    - POD=`kubectl get pod -l service=db -o jsonpath='{.items[0].metadata.name}'`
    - nc -z localhost 5432 || kubectl port-forward $POD 5432:5432 &
    - FRMDB_STORAGE=postgres npm test || true
    - pkill -9 kubectl || true # kill the tunnel to allow the job to finish
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

stress:
  stage: stress
  script:
    - npm test -- core/src/frmdb_engine.stress.spec.ts
    - export KUBECONFIG=`k3d get-kubeconfig`
    - POD=`kubectl get pod -l service=db -o jsonpath='{.items[0].metadata.name}'`
    - nc -z localhost 5432 || kubectl port-forward $POD 5432:5432 &
    - FRMDB_STORAGE=postgres npm test -- core/src/frmdb_engine.stress.spec.ts
    - pkill -9 kubectl || true # kill the tunnel to allow the job to finish
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

e2e_dev_env:
  stage: e2e_dev_env
  script:
    - export KUBECONFIG=`k3d get-kubeconfig`
    - POD=`kubectl get pod -l service=lb -o jsonpath='{.items[0].metadata.name}'`
    - nc -z localhost 8081 || kubectl port-forward $POD 8081:80 &
    - TARGET=headless protractor --baseUrl='http://localhost:8081' e2e/protractor.conf.js
    - pkill -9 kubectl || true # kill the tunnel to allow the job to finish
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/

deploy:
  stage: deploy
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/frmdb-apps/ci-tools.git
    - cd ci-tools
    - npm install
    - source tools.sh
    - cd ..
    # publish vvvebj on GCloud
    - NODE_PATH=ci-tools/node_modules upload-assets `find vvvebjs -type f -print`
    # publish portal on GCloud
    - NODE_PATH=ci-tools/node_modules upload-assets `find portal/public/ -type f -print`
    # publish FE on GCloud
    - mkdir -p dist/fe
    - cp fe/js/*js dist-fe/frmdb-fe.js dist-fe/frmdb-data-grid.js dist-fe/frmdb-editor.js dist/fe
    - cd dist
    - for i in `find -type f -printf '%P\n'` ; do NODE_PATH=ci-tools/node_modules upload-asset $i; done
    - cd ..
    - export KUBECONFIG=k8s/demo-kube-config.conf
    - skaffold deploy
    - POD=`kubectl get pod -l service=db -o jsonpath='{.items[0].metadata.name}'`
    - nc -z localhost 5433 || kubectl port-forward $POD 5433:5432 &
    - PGPORT=5433 npm run e2e:data
    - pkill -9 kubectl || true # kill any previous tunnels
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/
  only:
    - master

e2e_demo_env:
  stage: e2e_demo_env
  script:
    - TARGET=headless protractor --baseUrl='https://formuladb.online' e2e/protractor.conf.js
  cache:
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - node_modules/
      - tsc-out/
      - dist-be/
      - dist-fe/
  only:
    - master


# e2e_example_apps:
#   script:
#     - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/metawiz/e2e.git

# videos:
#   stage: videos
#   script:
#     - docker run --rm --name ci-with-video --cap-add=SYS_ADMIN --user centos -v $PWD:/home/centos/febe registry.gitlab.com/metawiz/febe/ci-with-video:1.0.1 bash -c 'source ~/.bashrc && sudo yum update -y google-chrome-stable.x86_64 && cd && cd febe/storage && npm install && cd ../core && npm install && cd ../fe/ && npm install && cd ../be/ && npm install && npm run compile && (npm run start &) && cd ../fe && npm run e2e-with-recordings-and-audio'
#   artifacts:
#     expire_in: 1 week
#     paths:
#       - fe/e2e/protractor_videos/
#   only:
#     refs:
#       - master

cleanup:
  stage: cleanup
  script:
#    - docker-compose down
    - docker system prune -af
#    - killall node --quiet || true
    - find /home/gitlab-runner/cache/ -type f -mmin +60 -delete
    # cleanup registry: BE development images in febe project
    - curl --request DELETE --data 'name_regex=.+-[0-9]+-[0-9a-z]{8}.+' --data 'keep_n=5' --data 'older_than=5d' --header "PRIVATE-TOKEN:mfDqKQ6zwhZaszaNpUys" "https://gitlab.com/api/v4/projects/4245551/registry/repositories/398919/tags"
  when: always
